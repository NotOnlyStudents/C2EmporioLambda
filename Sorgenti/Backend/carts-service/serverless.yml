service: carts-service

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  stage: ${opt:stage, "dev"}
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: '*'
  environment:
    CARTS_TABLE: carts-table-${self:provider.stage}
    PRODUCT_DELETED_QUEUE: product-deleted-queue-${self:provider.stage}.fifo
    PRODUCT_DELETED_DEAD: dead-product-deleted-queue-${self:provider.stage}.fifo
    PRODUCT_EDITED_QUEUE: product-edited-queue-${self:provider.stage}.fifo
    PRODUCT_EDITED_DEAD: dead-product-edited-queue-${self:provider.stage}.fifo
    PAYED_CART_QUEUE: payed-cart-queue-${self:provider.stage}.fifo
    PAYED_CART_DEAD: dead-payed-cart-queue-${self:provider.stage}.fifo
    DYNAMODB_CONFIG_FILE_PATH: configs/${self:provider.stage}-dynamo.yml

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-dynamodb-seed
  - serverless-offline

functions:
  addProductToCart:
    handler: src/endpoints/addProduct.default
    description: New content of the buyer's cart
    events:
      - http:
          path: cart
          method: POST
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getCartToken:
    handler: src/endpoints/getCartToken.default
    description: Obtain information about a user personal cart
    events:
      - http:
          path: cart
          method: GET
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updateProductQuantity:
    handler: src/endpoints/updateProductQuantity.default
    description: Update the product quantity
    events:
      - http:
          path: cart/{productId}
          method: PATCH
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  deleteProductFromCart:
    handler: src/endpoints/deleteProduct.default
    description: Delete the rpoduct from the cart
    events:
      - http:
          path: cart/{productId}
          method: DELETE
          cors: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  emptyCart:
    handler: src/endpoints/emptyCart.default
    description: Empty the cart after successful payment
    events:
      - sqs:
          arn:
            !GetAtt 'PayedCartQueue.Arn'
  removeDeletedProduct:
    handler: src/endpoints/removeDeletedProduct.default
    description: Delete all the products deleted from the vendor
    events:
      - sqs:
          arn:
            !GetAtt 'ProductDeletedQueue.Arn'
  updateEditedProduct:
    handler: src/endpoints/updateEditedProduct.default
    description: Update all the products edited from the vendor
    events:
      - sqs:
          arn:
            !GetAtt 'ProductEditedQueue.Arn'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    migration:
      dir: ./offline
    seed: 
      cart:
        sources:
          - table: ${self:provider.environment.CARTS_TABLE}
            sources: [./offline/seeds/carts.json]

resources:
  Resources:
    ProductEditedQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.PRODUCT_EDITED_QUEUE}
        FifoQueue: true
        DelaySeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy:
          maxReceiveCount: 1
          deadLetterTargetArn:
            !GetAtt 'DeadEditedProduct.Arn'

    DeadEditedProduct:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.PRODUCT_EDITED_DEAD}
        FifoQueue: true
        MessageRetentionPeriod: 604800 #7 days, should be enough time to fix an issue and retry the messages again in case of a critical issue

    SqsEditedProductPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: ProductEditedQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource:
                !GetAtt 'ProductEditedQueue.Arn'
              Condition:
                ArnEquals:
                  'aws:SourceArn': arn:aws:sns:eu-west-1:501082649462:ProductEdited.fifo

    ProductEditedTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          !GetAtt 'ProductEditedQueue.Arn'
        Protocol: "sqs"
        TopicArn: arn:aws:sns:eu-west-1:501082649462:ProductEdited.fifo

    PayedCartQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.PAYED_CART_QUEUE}
        FifoQueue: true
        DelaySeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy:
          maxReceiveCount: 1
          deadLetterTargetArn:
            !GetAtt 'DeadPayedCart.Arn'

    DeadPayedCart:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.PAYED_CART_DEAD}
        FifoQueue: true
        MessageRetentionPeriod: 604800 #7 days, should be enough time to fix an issue and retry the messages again in case of a critical issue

    SqsPayedCartPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: PayedCartQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource:
                !GetAtt 'PayedCartQueue.Arn'
              Condition:
                ArnEquals:
                  'aws:SourceArn': arn:aws:sns:eu-west-1:501082649462:PayedCart.fifo

    PayedCartTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          !GetAtt 'PayedCartQueue.Arn'
        Protocol: "sqs"
        TopicArn: arn:aws:sns:eu-west-1:501082649462:PayedCart.fifo
    
    ProductDeletedQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.PRODUCT_DELETED_QUEUE}
        FifoQueue: true
        DelaySeconds: 0
        VisibilityTimeout: 30
        RedrivePolicy:
          maxReceiveCount: 1
          deadLetterTargetArn:
            !GetAtt 'DeadDeletedProduct.Arn'

    DeadDeletedProduct:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.PRODUCT_DELETED_DEAD}
        FifoQueue: true
        MessageRetentionPeriod: 604800 #7 days, should be enough time to fix an issue and retry the messages again in case of a critical issue

    SqsDeletedProductPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: ProductDeletedQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource:
                !GetAtt 'ProductDeletedQueue.Arn'
              Condition:
                ArnEquals:
                  'aws:SourceArn': arn:aws:sns:eu-west-1:501082649462:ProductDeleted.fifo

    ProductDeletedTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          !GetAtt 'ProductDeletedQueue.Arn'
        Protocol: "sqs"
        TopicArn: arn:aws:sns:eu-west-1:501082649462:ProductDeleted.fifo

    CartsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CARTS_TABLE}
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: cognito-${self:provider.stage}
        RestApiId: 
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !ImportValue ${self:provider.stage}-user-pool-arn